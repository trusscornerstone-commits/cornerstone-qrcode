// VERSION_MARKER: TESTE_20250922_1613
/**  * scan_truss.js (versão robusta)  * - Fallback se facingMode environment não existir.  * - Sem redirecionamento automático em erro.  * - Logs claros e UI de feedback.  * - Placeholder para detecção de QR.  */ // VERSION_MARKER: TESTE_2025-09-22_19h25 (function () {   const qrBtn = document.getElementById('qrBtn');   const videoPreview = document.getElementById('videoPreview');   const FEEDBACK_ID = 'cameraFeedback';    let stream = null;   let videoEl = null;   let scanning = false;   let lastDecode = null;    function setFeedback(msg, isError=false) {     let fb = document.getElementById(FEEDBACK_ID);     if (!fb) {       fb = document.createElement('div');       fb.id = FEEDBACK_ID;       fb.style.marginTop = '8px';       fb.style.fontSize = '0.9rem';       fb.style.fontFamily = 'system-ui, sans-serif';       videoPreview.appendChild(fb);     }     fb.textContent = msg;     fb.style.color = isError ? '#d33' : '#ccc';   }    async function listDevices() {     try {       const devices = await navigator.mediaDevices.enumerateDevices();       console.log("[SCAN] Dispositivos:", devices.map(d => ({         kind: d.kind,         label: d.label,         deviceId: d.deviceId       })));       if (!devices.some(d => d.kind === 'videoinput')) {         setFeedback("Nenhuma câmera foi detectada neste dispositivo.", true);       }     } catch (e) {       console.warn("[SCAN] enumerateDevices falhou:", e);     }   }    function cleanupPreview() {     videoPreview.innerHTML = '';   }    function buildVideoElement() {     cleanupPreview();     videoEl = document.createElement('video');     videoEl.setAttribute('playsinline', 'true');     videoEl.setAttribute('autoplay', 'true');     videoEl.setAttribute('muted', 'true');     videoEl.muted = true;      videoEl.style.width = '100%';     videoEl.style.maxHeight = '60vh';     videoEl.style.objectFit = 'cover';     videoEl.style.background = '#000';     videoEl.style.border = '1px solid #333';     videoEl.style.borderRadius = '8px';      videoPreview.appendChild(videoEl);      const stopBtn = document.createElement('button');     stopBtn.type = 'button';     stopBtn.textContent = 'Cancelar';     stopBtn.style.marginTop = '8px';     stopBtn.addEventListener('click', stopCamera);     videoPreview.appendChild(stopBtn);   }    async function startCamera() {     if (!navigator.mediaDevices?.getUserMedia) {       setFeedback("Navegador não suporta acesso à câmera.", true);       return;     }     if (stream) {       setFeedback("Câmera já ativa.");       return;     }     buildVideoElement();     setFeedback("Solicitando acesso à câmera...");      // Primeira tentativa: traseira     try {       stream = await navigator.mediaDevices.getUserMedia({         video: { facingMode: { ideal: 'environment' } },         audio: false       });       console.log("[SCAN] Stream OK (environment).");     } catch (err1) {       console.warn("[SCAN] Falhou com environment:", err1.name, err1.message);       if (err1.name === 'NotFoundError' || err1.name === 'OverconstrainedError') {         setFeedback("Tentando fallback de câmera genérica...");         try {           stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: false });           console.log("[SCAN] Stream OK (fallback).");         } catch (err2) {           handleCameraError(err2);           return;         }       } else {         handleCameraError(err1);         return;       }     }      videoEl.srcObject = stream;     try {       await videoEl.play();     } catch (playErr) {       console.warn("[SCAN] Falha ao iniciar vídeo:", playErr);       setFeedback("Falha ao iniciar vídeo.", true);       stopCamera();       return;     }      scanning = true;     setFeedback("Câmera ativa. Aponte para o QR (leitura ainda não implementada).");     listDevices();     // Aqui você chamaria startScanLoop() depois de adicionar a lib de QR   }    function stopCamera() {     scanning = false;     if (stream) {       stream.getTracks().forEach(t => t.stop());       stream = null;     }     cleanupPreview();   }    function handleCameraError(err) {     console.error("[SCAN] Erro câmera:", err);     let msg;     switch (err.name) {       case 'NotAllowedError':         msg = "Permissão negada. Habilite a câmera nas configurações do navegador.";         break;       case 'NotFoundError':       case 'OverconstrainedError':         msg = "Nenhuma câmera disponível ou compatível foi encontrada.";         break;       case 'NotReadableError':         msg = "A câmera está em uso por outro aplicativo.";         break;       default:         msg = `Erro ao acessar câmera (${err.name}).`;     }     setFeedback(msg, true);   }    function onQRCodeDetected(decodedText) {     if (decodedText === lastDecode) return;     lastDecode = decodedText;     console.log("[SCAN] QR detectado:", decodedText);     stopCamera();     // Redireciono só quando estiver OK:     const target = `${trussDetailUrl}?qr=${encodeURIComponent(decodedText)}`;     window.location.href = target;   }    qrBtn.addEventListener('click', (e) => {     e.preventDefault();     e.stopPropagation();     startCamera();   });    window.addEventListener('beforeunload', stopCamera);    // Expor para debug manual no console:   window.__qrScan = { startCamera, stopCamera, onQRCodeDetected }; })();
